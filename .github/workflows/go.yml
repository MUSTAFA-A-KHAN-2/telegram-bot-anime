# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.3'

      - name: Build executable
        run: |
          go build -o telegram-bot-anime ./
          echo "Executable built:"
          ls -lh telegram-bot-anime

      - name: Upload executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: telegram-bot-anime
          path: telegram-bot-anime

  deploy:
    runs-on: self-hosted
    needs: build

    steps:
      - name: Download binary
        uses: actions/download-artifact@v3
        with:
          name: telegram-bot-anime

      - name: Check free memory before deploying
        run: |
          echo "Free memory snapshot:"
          free -m
          MIN_MEM_MB=512
          FREE_MEM=$(awk '/MemFree/ { print int($2/1024) }' /proc/meminfo)
          echo "Available memory: ${FREE_MEM} MB"
          if [ "$FREE_MEM" -lt "$MIN_MEM_MB" ]; then
            echo "‚ùå Not enough memory to deploy. Required: ${MIN_MEM_MB} MB, Available: ${FREE_MEM} MB"
            exit 1
          fi
          echo "‚úÖ Sufficient memory to deploy."

      - name: Run binary
        run: |
          chmod +x telegram-bot-anime
          echo "üöÄ Starting application..."
          ./telegram-bot-anime

    # - name: Test
    #   run: go test -v ./...
